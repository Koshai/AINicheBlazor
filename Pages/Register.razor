@page "/register"
@using Services
@using System.ComponentModel.DataAnnotations
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<div class="row justify-content-center mt-5">
    <div class="col-md-6">
        <div class="card shadow">
            <div class="card-header bg-primary text-white">
                <h3 class="mb-0">Register</h3>
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(message))
                {
                    <div class="alert @(success ? "alert-success" : "alert-danger")">
                        @message
                    </div>
                }

                <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
                        <ValidationMessage For="@(() => registerModel.Email)" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
                        <ValidationMessage For="@(() => registerModel.Password)" />
                    </div>

                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm Password</label>
                        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" />
                        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                    </div>

                    <div class="d-flex justify-content-between">
                        <button type="submit" class="btn btn-primary" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span class="ms-1">Registering...</span>
                            }
                            else
                            {
                                <span>Register</span>
                            }
                        </button>
                        <a href="/login" class="btn btn-outline-secondary">Login</a>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private bool isLoading = false;
    private string message = string.Empty;
    private bool success = false;

    protected override async Task OnInitializedAsync()
    {
        if (await AuthService.IsAuthenticated())
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleRegister()
    {
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            message = "Passwords do not match";
            success = false;
            return;
        }

        isLoading = true;
        message = string.Empty;
        
        try
        {
            var result = await AuthService.Register(registerModel.Email, registerModel.Password);
            success = result.Success;
            message = result.Message;
            
            if (result.Success)
            {
                // Redirect to login after successful registration
                NavigationManager.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            success = false;
            message = $"Error: {ex.Message}";
        }
        
        isLoading = false;
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Confirm Password is required")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}