@page "/history"
@using Services
@inject IHttpClientFactory HttpClientFactory
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<h3>Content Generation History</h3>

@if (loading)
{
    <div class="text-center mt-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading history...</p>
    </div>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}
else if (history?.Items?.Count == 0)
{
    <div class="alert alert-info">
        You haven't generated any content yet. <a href="/">Generate some now!</a>
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Niche</th>
                    <th>Content Type</th>
                    <th>Engine</th>
                    <th>Language</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in history.Items)
                {
                    <tr>
                        <td>@item.CreatedAt.ToLocalTime().ToString("g")</td>
                        <td>@item.Niche</td>
                        <td>@item.ContentType</td>
                        <td>@(item.Engine == "openai" ? "OpenAI" : "Ollama")</td>
                        <td>@(item.Language == "en" ? "English" : "Bangla")</td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowContent(item)">
                                View
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="d-flex justify-content-between align-items-center mt-3">
        <span>
            Showing page @history.CurrentPage of @history.Pages
        </span>
        <div>
            <button class="btn btn-sm btn-outline-primary me-2" disabled="@(history.CurrentPage <= 1)"
                    @onclick="() => LoadHistory(history.CurrentPage - 1)">
                Previous
            </button>
            <button class="btn btn-sm btn-outline-primary" disabled="@(history.CurrentPage >= history.Pages)"
                    @onclick="() => LoadHistory(history.CurrentPage + 1)">
                Next
            </button>
        </div>
    </div>
}

@if (selectedItem != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Content: @selectedItem.Niche (@selectedItem.ContentType)</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="border p-3 rounded bg-light">
                        <pre style="white-space: pre-wrap;">@selectedItem.Response</pre>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private HistoryResponse history;
    private bool loading = true;
    private string errorMessage;
    private GenerationItem selectedItem;

    protected override async Task OnInitializedAsync()
    {
        bool isAuthenticated = await AuthService.IsAuthenticated();
        
        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }
        
        await LoadHistory(1);
    }
    
    private async Task LoadHistory(int page)
    {
        loading = true;
        errorMessage = null;
        
        try
        {
            var token = await AuthService.GetToken();
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }
            
            var client = HttpClientFactory.CreateClient();
            client.DefaultRequestHeaders.Add("X-API-Token", token);
            
            var response = await client.GetAsync($"http://localhost:5000/generate/history?page={page}&per_page=10");
            
            if (response.IsSuccessStatusCode)
            {
                history = await response.Content.ReadFromJsonAsync<HistoryResponse>();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                errorMessage = $"Error loading history: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }
    
    private void ShowContent(GenerationItem item)
    {
        selectedItem = item;
    }
    
    private void CloseModal()
    {
        selectedItem = null;
    }
    
    public class HistoryResponse
    {
        public List<GenerationItem> Items { get; set; } = new();
        public int Total { get; set; }
        public int Pages { get; set; }
        public int CurrentPage { get; set; }
    }
    
    public class GenerationItem
    {
        public int Id { get; set; }
        public string Niche { get; set; }
        public string ContentType { get; set; }
        public string Engine { get; set; }
        public string Language { get; set; }
        public DateTime CreatedAt { get; set; }
        public string Response { get; set; }
    }
}